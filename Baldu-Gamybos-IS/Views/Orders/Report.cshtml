@model Baldu_Gamybos_IS.Models.ViewModel.ReportView.ReportView;
@{
	ViewData["Title"] = "Report";
}

<!DOCTYPE html>
<head>
	<link rel="stylesheet" href="~/css/warehouse.css" />
	<style>
		body {
			margin: 0;
			font-family: Arial, Helvetica, sans-serif;
		}

		.center {
			text-align: center;
		}

		#customers .wire {
			text-align: left;
			position: relative;
			right: 9px;
			border: 0px
		}
	</style>
</head>
<body>
	<center>
		<table id="customers" style="width:100%;">
			<tr>
				<th colspan=2></th>
			</tr>
			<tr>
				<td>
					Užsakymų skaičius
				</td>
				<td>
					@this.Model.Orders.Count()
				</td>
			</tr>
			<tr>
				<td>
					Mūsų užsakymų skaičius
				</td>
				<td>
					@this.Model.Orders.Where(o => o.Direction.GetValueOrDefault()).Count()
				</td>
			</tr>
			<tr>
				<td>
					Klientų užsakymų skaičius
				</td>
				<td>
					@this.Model.Orders.Where(o => !o.Direction.GetValueOrDefault()).Count()
				</td>
			</tr>
			@foreach (OrderStatus s in this.Model.Statuses) {
				<tr>
					<td>@String.Format("Užsakymų skaičius su statusu: {0}", s.Name)</td>
					<td>@s.GenericOrders.Count</td>
				</tr>
			}
			<tr>
				<td>
					Brangiausias užsakymas
				</td>
				<td>
					@{
						Single max = this.Model.Orders.Aggregate(0.0f, (max, o) => o.Price.GetValueOrDefault() > max ? o.Price.GetValueOrDefault() : max, max => max);
						GenericOrder order = this.Model.Orders.First(o => o.Price == max);
					}
					@String.Format("{0}: {1}", order.Id, max)
				</td>
			</tr>
			<tr>
				<td>
					Užsakymų kainų vidurkis
				</td>
				<td>
					@Math.Round(this.Model.Orders.Average(o => o.Price.GetValueOrDefault()), 2, MidpointRounding.AwayFromZero)
				</td>
			</tr>
			<tr>
				<th colspan=2></th>
			</tr>
		</table>
	</center>
</body>
